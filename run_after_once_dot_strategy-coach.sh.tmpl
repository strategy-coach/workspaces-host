#!/bin/bash
set -uo pipefail

# -------------------------------------------------------------------------------------------------
# ** ALL COMMANDS IN THIS SCRIPT MUST BE IDEMPOTENT **
# -------------------------------------------------------------------------------------------------
# This file will be executed after a call to `chezmoi apply` or `chezmoi update` anytime the source 
# `run_once_install-packages.sh.tmpl` changes; because this file can be run multiple times, be sure 
# all commands/tasks in this file can safely be run more than once.
# -------------------------------------------------------------------------------------------------
# * Use relative paths to find binaries (e.g. ~/.local/bin/xyz) and don't assume anything is in PATH
# * If you add/remove packages be sure to reflect it in `~/.strategy-coach/doctor.ts`.
# -------------------------------------------------------------------------------------------------
# If you want to force-run this script after you've updated configs:
#   chezmoi state delete-bucket --bucket=scriptState
#   chezmoi apply
# -------------------------------------------------------------------------------------------------

eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"

{{- if (index . "github") }}
{{-   if (index . "github" "user") }}
{{-     if (index . "github" "user" "prime" "pat") }}
# set this so that `brew`, `pkgx` and other commands that need to access the GitHub API can use it
# (helps prevent GitHub rate-limiting based issues)
export GITHUB_API_TOKEN="{{ .github.user.prime.pat }}"
{{-     else}}
# '.github.user.prime.pat' required in chezmoi.toml if this is desired:
#export GITHUB_API_TOKEN="..."
{{-     end}}
{{-   end}}
{{- end}}

homebrew_user_packages=""
{{- if (index . "packages") }}
{{-   if (index . "packages" "homebrew" "user") }}
{{-     if (index . "packages" "homebrew" "user" "install") }}
homebrew_user_packages="{{ .packages.homebrew.user.install | join " " }}"
{{-     end}}
{{-   end}}
{{- end}}

pkgx_user_packages=""
{{- if (index . "packages") }}
{{-   if (index . "packages" "pkgx" "user") }}
{{-     if (index . "packages" "pkgx" "user" "install") }}
pkgx_user_packages="{{ .packages.pkgx.user.install | join " " }}"
{{-     end}}
{{-   end}}
{{- end}}

# run any complex installs which cannot run through Deno in shell-script

# mise-en-place dev tools, env vars, task runner
curl -fsSL https://mise.jdx.dev/install.sh | MISE_QUIET=true sh

# SDKMAN! Software Development Kit Manager (https://sdkman.io/)
if [ -d "$HOME/.sdkman" ]; then
	echo "SDKMAN! found."
else
    curl -s "https://get.sdkman.io" | bash
    # use `sdk` defined in ~/.config/fish/functions/sdk.fish
fi

# For any chezmoi-managed config files this script depend on, we grab the SHA256 for the dependency.
# See https://www.chezmoi.io/user-guide/use-scripts-to-perform-actions/#install-packages-with-scripts;
# executable_workspaces-host-ctl.ts hash: {{ include "dot_strategy-coach/executable_workspaces-host-ctl.ts" | sha256sum }}
# dot_eget.toml.tmpl hash: {{ include "dot_eget.toml.tmpl" | sha256sum }}

# Homebrew should be in the path now
deno run -A ~/.strategy-coach/workspaces-host-ctl.ts setup \
    --pkgx-install="$pkgx_user_packages {{ .packages.pkgx.install | join " " }}" \
    --brew-install="$homebrew_user_packages {{ .packages.homebrew.install | join " " }}"